● 개요
configuration Service는 환경파일을 관리하기 위한 서비스이다.
	- spring cloud config
	- Logcal git repo
	- spring boot actuator
	- profiles 적용
	- remote git
	- native file repo

● spring-cloud config
	- 각자의 마이크로서비스내의 구성파일을 config-server를 통해서 관리한다.
		특정의 디렉토리 git을 이용해서 관리된다.
	- 주요 특징
		- 분산 시스템에서 서버 및 클라이언트의 정보(application.xml)를 외부시스템에서 관리 하는 아키텍처
		- 하나의 중앙화된 저장소를 사용한다.
		- 각 서비스들을 빌드하지 않고 리얼타임 배포한다.
		- 환경(개발-테스트-운영)별로 구성정보를 다르게 관리가능하다.	
	- 아키텍처
		위치는 별도 지정한 위치를 말한다.
		
		GitRepo		-----> spring cloud config server -----> rabbitmq ------> spring bus -----> dev환경 마이크로서비스
		LocalRepo
		(application.yml)																								-----> 운영환경 마이크로서비스
		(application-dev.yml)

● spring boot 에서 applicaton.yml 파일의 적용 우선순위
	- 순위
		- 0순위 : bootstrap.yml
		- 1순위 : application.yml
		- 2순위 : application-name.yml 즉 user-service.yml, order-service.yml ....
		- 3순위 : application-naem-<profile>.yml 예) user-service-dev.yml, user-service-prod.yml
	
	- 적용방식
		- spring은 profile이라는 태그를 이용해서 구성파일을 찾는다
			profile: prod 라고 하면 user-service-prod.yml을 찾아서 읽는다. 

● 만들어 놓은 yaml 파일 참조방법은
	- ecommerce.yml 파일을 생성했다면
		- http://127.0.0.1:8888/ecommerce.yml/default		
			: 여기서 default 자리는 profile을 의미한다.
		- http://127.0.0.1:8888/ecommerce.yml/dev
			: ecommerce-dev.yml 참조
			
		
● 아키텍처 흐름
	- config-service는 기동하면 config resource를 scan해서 저장한다.
	- 마이크로서비스(user-service)는 기동하면 config-service에 관련 정보를 요청한다.
		user-service는 bootstarap.yml파일내에 config-server에 대한 ip 정보를 가지고 있고
		읽어야 될 파일명도 명시하고 있다.
		spring:
		  cloud:
		    config:
		      uri: http://127.0.0.1:8888
		      name: ecommerce (읽어야 될 파일명)    
		
				