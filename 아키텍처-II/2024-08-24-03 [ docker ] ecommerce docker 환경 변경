docker bridge network
#-----------------------------------------------------------------------------------------------------------------------
[아키텍처]
    우리는 이제 docker-container의 ip가 아닌 실제 도커 컨테이너의 이름으로 서비스를 찾을 수 있도록 환경을 구성해보자
    --------------------------------------------------------------------------------------------------------------------
    □ HOST PC 172.30.1.23
    □ Docker Server(Engine) 172.17.0.1
        - Container (Config-service) 172.17.0.3:8888
        - Contaienr (maridb) 172.17.0.6:3306
        ....
        여기서 config-service는 maridb를 사용하기 위해 ip 182.17.0.6:3306 이 아니라 maridb 컨테이너 이름으로 접근가능 하도록하는
        환경을 구성한다.
#-----------------------------------------------------------------------------------------------------------------------
[RabbitMq]
    □ 컨테이너 생성
        - docker run -d --name rabbitmq --network ecommerce-network \
                 -p 15672:15672 -p 5672:5672 -p 15671:15671 -p 5671:5671 -p 4369:4369 \
                 -e RABBITMQ_DEFAULT_USER=guest \
                 -e RABBITMQ_DEFAULT_PASS=guest rabbitmq:management
    □ 네트워크에 할당여부 확인 - 이제부터 모든 컨테이너는 rabbitmq로 접속하거나 172.18.0.2로 접근가능하다.
        - docker network inspect

    □ 접근
        http://localhost:15672/#/
        윈도의 rabbitmq은 잠시 내린다.

#-----------------------------------------------------------------------------------------------------------------------
[config-service]
    □ application.yml - rabbit
      config-service는 현재 window rabbitmq를 사용하고 있다. 이것을 도커 컨테이너서버로 변경한다.
      docker network inspect ecommerce-network를 통해서 직접 rabbitmq ip로 변경해도 되나, 실행커맨드라인에서 해도 된다.
      rabbitmq 컨테이너이름으로 변경한다.
        ----------------------------------------------------------------------------------------------------------------
        type1:application.yaml 수정
            spring
              rabbitmq:
                host: 172.17.0.2
                port: 5672
        ---------------------------------------------------------------------------------------------------------------- or
        type2: config-service 실행커맨드에서 rabbitmq서버 지정
            docker run -d -p 8888:8888 --network ecommerce-network ^
                -e "spring.rabbitmq.host=rabbitmq" ^    ◀ ■■■
                -e "spring.profiles.active=default" ^
                --name my-configservice changwskr/my-configservice:1.0

        이렇게 사용하면 application.yaml 수정없이 사용가능하다.

    □ application.yml - profile
        ----------------------------------------------------------------------------------------------------------------
        spring:
          profiles:
            active: git  ◀ ■■■
          cloud:
            config:
              server:
                native:
                  search-locations: file:///C:\Programming(23-08-15)\zRepository\r2022-11-17-spring-cloud-config-native-repository
                git: ◀ ■■■
                  uri: https://github.com/changwskr/r2022-11-17-spring-cloud-config-repository.git   ◀ ■■■
                  force-pull: true

    □ bootstrap.yml 2024-08-24-03
      지난 버전은 윈도우를 기준으로 환경이 구성되어져 있다. 도커 컨테이너로 변경하기 위해 jks 파일위치를 바꾸어 준다. location: file:/apiEncryptionKey.jks
        ----------------------------------------------------------------------------------------------------------------
        encrypt:
              # 비대칭키를 이용해서 암호화하는 경우
              # 2022-11-28-3 비대칭 암복호화 용으로 적용
              # keystore 정보는 비대칭키를 관리한다는 정보를 의미한다. 여기에는 keytool를 통해 만들어진 키에 대한 정보를 준다.
              #  keytool -genkeypair -alias apiEncryptionKey -keyalg RSA \
              #  -dname "CN=Kenneth Lee, OU=API Development, O=joneconsulting.co.kr, L=Seoul, C=KR" \
              #  -keypass "1q2w3e4r" -keystore apiEncryptionKey.jks -storepass "1q2w3e4r"
          key-store:

            # location 변경이력
            # 2024-08-24-03 config-service를 도커 컨테이너로 변경으로 인해 위치 변경한다.
            # old
            # location: file:///C:\Programming(23-08-15)\zRepository\r2022-11-17-spring-cloud-config-service\keystore\apiEncryptionKey.jks
            #---
            # new 2024-08-24-03
            location: file:/apiEncryptionKey.jks

            password: 1q2w3e4r
            alias: apiEncryptionKey

    □








